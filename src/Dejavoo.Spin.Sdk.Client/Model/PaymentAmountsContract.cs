/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     PaymentAmountsContract
    /// </summary>
    [DataContract]
    public sealed class PaymentAmountsContract : IEquatable<PaymentAmountsContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="PaymentAmountsContract" /> class.
        /// </summary>
        /// <param name="totalAmount">Amount with fee and tip..</param>
        /// <param name="amount">Amount with tip..</param>
        /// <param name="tipAmount">Tip amount of the transaction..</param>
        /// <param name="feeAmount">Fee amount of the transaction..</param>
        /// <param name="taxAmount">Tax amount of the transaction..</param>
        public PaymentAmountsContract(double? totalAmount = default, double? amount = default, double? tipAmount = default,
            double? feeAmount = default, double? taxAmount = default)
        {
            TotalAmount = totalAmount;
            Amount = amount;
            TipAmount = tipAmount;
            FeeAmount = feeAmount;
            TaxAmount = taxAmount;
        }

        /// <summary>
        ///     Amount with fee and tip.
        /// </summary>
        /// <value>Amount with fee and tip.</value>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public double? TotalAmount { get; set; }

        /// <summary>
        ///     Amount with tip.
        /// </summary>
        /// <value>Amount with tip.</value>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double? Amount { get; set; }

        /// <summary>
        ///     Tip amount of the transaction.
        /// </summary>
        /// <value>Tip amount of the transaction.</value>
        [DataMember(Name = "TipAmount", EmitDefaultValue = false)]
        public double? TipAmount { get; set; }

        /// <summary>
        ///     Fee amount of the transaction.
        /// </summary>
        /// <value>Fee amount of the transaction.</value>
        [DataMember(Name = "FeeAmount", EmitDefaultValue = false)]
        public double? FeeAmount { get; set; }

        /// <summary>
        ///     Tax amount of the transaction.
        /// </summary>
        /// <value>Tax amount of the transaction.</value>
        [DataMember(Name = "TaxAmount", EmitDefaultValue = false)]
        public double? TaxAmount { get; set; }

        /// <summary>
        ///     Returns true if PaymentAmountsContract instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentAmountsContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentAmountsContract input)
        {
            if (input == null)
                return false;

            return
                (
                    TotalAmount == input.TotalAmount ||
                    (TotalAmount != null &&
                     TotalAmount.Equals(input.TotalAmount))
                ) &&
                (
                    Amount == input.Amount ||
                    (Amount != null &&
                     Amount.Equals(input.Amount))
                ) &&
                (
                    TipAmount == input.TipAmount ||
                    (TipAmount != null &&
                     TipAmount.Equals(input.TipAmount))
                ) &&
                (
                    FeeAmount == input.FeeAmount ||
                    (FeeAmount != null &&
                     FeeAmount.Equals(input.FeeAmount))
                ) &&
                (
                    TaxAmount == input.TaxAmount ||
                    (TaxAmount != null &&
                     TaxAmount.Equals(input.TaxAmount))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentAmountsContract {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TipAmount: ").Append(TipAmount).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PaymentAmountsContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                if (TipAmount != null)
                    hashCode = hashCode * 59 + TipAmount.GetHashCode();
                if (FeeAmount != null)
                    hashCode = hashCode * 59 + FeeAmount.GetHashCode();
                if (TaxAmount != null)
                    hashCode = hashCode * 59 + TaxAmount.GetHashCode();
                return hashCode;
            }
        }
    }
}