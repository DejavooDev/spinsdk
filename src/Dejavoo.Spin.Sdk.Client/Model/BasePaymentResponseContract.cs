/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     BasePaymentResponseContract
    /// </summary>
    [DataContract]
    public sealed class BasePaymentResponseContract : IEquatable<BasePaymentResponseContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="BasePaymentResponseContract" /> class.
        /// </summary>
        /// <param name="paymentType">Indicates electronic data capture  [&#x27;Credit&#x27;, &#x27;Debit&#x27;, &#x27;EBT&#x27;, &#x27;Card&#x27;]..</param>
        /// <param name="amounts">amounts.</param>
        /// <param name="authCode">Authorization code provided by payment processor..</param>
        /// <param name="referenceId">Alphanumeric unique SPin transaction identifier..</param>
        /// <param name="invoiceNumber">Unique invoice number..</param>
        /// <param name="serialNumber">Device Serial Number..</param>
        /// <param name="batchNumber">Current batch number..</param>
        /// <param name="transactionNumber">Transaction number within batch..</param>
        /// <param name="voided">Indicates whether transaction was voided or not..</param>
        /// <param name="signature">Indicates customer signature if it was captured..</param>
        /// <param name="cardData">cardData.</param>
        /// <param name="receipts">receipts.</param>
        /// <param name="generalResponse">generalResponse.</param>
        public BasePaymentResponseContract(string paymentType = default, PaymentAmountsContract amounts = default,
            string authCode = default, string referenceId = default, string invoiceNumber = default,
            string serialNumber = default, string batchNumber = default, string transactionNumber = default,
            bool? voided = default, string signature = default, CardDataContract cardData = default,
            ReceiptContract receipts = default, GeneralResponseContract generalResponse = default)
        {
            PaymentType = paymentType;
            Amounts = amounts;
            AuthCode = authCode;
            ReferenceId = referenceId;
            InvoiceNumber = invoiceNumber;
            SerialNumber = serialNumber;
            BatchNumber = batchNumber;
            TransactionNumber = transactionNumber;
            Voided = voided;
            Signature = signature;
            CardData = cardData;
            Receipts = receipts;
            GeneralResponse = generalResponse;
        }

        /// <summary>
        ///     Indicates electronic data capture  [&#x27;Credit&#x27;, &#x27;Debit&#x27;, &#x27;EBT&#x27;, &#x27;Card&#x27;].
        /// </summary>
        /// <value>Indicates electronic data capture  [&#x27;Credit&#x27;, &#x27;Debit&#x27;, &#x27;EBT&#x27;, &#x27;Card&#x27;].</value>
        [DataMember(Name = "PaymentType", EmitDefaultValue = false)]
        public string PaymentType { get; set; }

        /// <summary>
        ///     Gets or Sets Amounts
        /// </summary>
        [DataMember(Name = "Amounts", EmitDefaultValue = false)]
        public PaymentAmountsContract Amounts { get; set; }

        /// <summary>
        ///     Authorization code provided by payment processor.
        /// </summary>
        /// <value>Authorization code provided by payment processor.</value>
        [DataMember(Name = "AuthCode", EmitDefaultValue = false)]
        public string AuthCode { get; set; }

        /// <summary>
        ///     Alphanumeric unique SPin transaction identifier.
        /// </summary>
        /// <value>Alphanumeric unique SPin transaction identifier.</value>
        [DataMember(Name = "ReferenceId", EmitDefaultValue = false)]
        public string ReferenceId { get; set; }

        /// <summary>
        ///     Unique invoice number.
        /// </summary>
        /// <value>Unique invoice number.</value>
        [DataMember(Name = "InvoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        ///     Device Serial Number.
        /// </summary>
        /// <value>Device Serial Number.</value>
        [DataMember(Name = "SerialNumber", EmitDefaultValue = false)]
        public string SerialNumber { get; set; }

        /// <summary>
        ///     Current batch number.
        /// </summary>
        /// <value>Current batch number.</value>
        [DataMember(Name = "BatchNumber", EmitDefaultValue = false)]
        public string BatchNumber { get; set; }

        /// <summary>
        ///     Transaction number within batch.
        /// </summary>
        /// <value>Transaction number within batch.</value>
        [DataMember(Name = "TransactionNumber", EmitDefaultValue = false)]
        public string TransactionNumber { get; set; }

        /// <summary>
        ///     Indicates whether transaction was voided or not.
        /// </summary>
        /// <value>Indicates whether transaction was voided or not.</value>
        [DataMember(Name = "Voided", EmitDefaultValue = false)]
        public bool? Voided { get; set; }

        /// <summary>
        ///     Indicates customer signature if it was captured.
        /// </summary>
        /// <value>Indicates customer signature if it was captured.</value>
        [DataMember(Name = "Signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        ///     Gets or Sets CardData
        /// </summary>
        [DataMember(Name = "CardData", EmitDefaultValue = false)]
        public CardDataContract CardData { get; set; }

        /// <summary>
        ///     Gets or Sets Receipts
        /// </summary>
        [DataMember(Name = "Receipts", EmitDefaultValue = false)]
        public ReceiptContract Receipts { get; set; }

        /// <summary>
        ///     Gets or Sets GeneralResponse
        /// </summary>
        [DataMember(Name = "GeneralResponse", EmitDefaultValue = false)]
        public GeneralResponseContract GeneralResponse { get; set; }

        /// <summary>
        ///     Returns true if BasePaymentResponseContract instances are equal
        /// </summary>
        /// <param name="input">Instance of BasePaymentResponseContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasePaymentResponseContract input)
        {
            if (input == null)
                return false;

            return
                (
                    PaymentType == input.PaymentType ||
                    (PaymentType != null &&
                     PaymentType.Equals(input.PaymentType))
                ) &&
                (
                    Amounts == input.Amounts ||
                    (Amounts != null &&
                     Amounts.Equals(input.Amounts))
                ) &&
                (
                    AuthCode == input.AuthCode ||
                    (AuthCode != null &&
                     AuthCode.Equals(input.AuthCode))
                ) &&
                (
                    ReferenceId == input.ReferenceId ||
                    (ReferenceId != null &&
                     ReferenceId.Equals(input.ReferenceId))
                ) &&
                (
                    InvoiceNumber == input.InvoiceNumber ||
                    (InvoiceNumber != null &&
                     InvoiceNumber.Equals(input.InvoiceNumber))
                ) &&
                (
                    SerialNumber == input.SerialNumber ||
                    (SerialNumber != null &&
                     SerialNumber.Equals(input.SerialNumber))
                ) &&
                (
                    BatchNumber == input.BatchNumber ||
                    (BatchNumber != null &&
                     BatchNumber.Equals(input.BatchNumber))
                ) &&
                (
                    TransactionNumber == input.TransactionNumber ||
                    (TransactionNumber != null &&
                     TransactionNumber.Equals(input.TransactionNumber))
                ) &&
                (
                    Voided == input.Voided ||
                    (Voided != null &&
                     Voided.Equals(input.Voided))
                ) &&
                (
                    Signature == input.Signature ||
                    (Signature != null &&
                     Signature.Equals(input.Signature))
                ) &&
                (
                    CardData == input.CardData ||
                    (CardData != null &&
                     CardData.Equals(input.CardData))
                ) &&
                (
                    Receipts == input.Receipts ||
                    (Receipts != null &&
                     Receipts.Equals(input.Receipts))
                ) &&
                (
                    GeneralResponse == input.GeneralResponse ||
                    (GeneralResponse != null &&
                     GeneralResponse.Equals(input.GeneralResponse))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasePaymentResponseContract {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  Amounts: ").Append(Amounts).Append("\n");
            sb.Append("  AuthCode: ").Append(AuthCode).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  TransactionNumber: ").Append(TransactionNumber).Append("\n");
            sb.Append("  Voided: ").Append(Voided).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  CardData: ").Append(CardData).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  GeneralResponse: ").Append(GeneralResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as BasePaymentResponseContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                if (Amounts != null)
                    hashCode = hashCode * 59 + Amounts.GetHashCode();
                if (AuthCode != null)
                    hashCode = hashCode * 59 + AuthCode.GetHashCode();
                if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                if (InvoiceNumber != null)
                    hashCode = hashCode * 59 + InvoiceNumber.GetHashCode();
                if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                if (BatchNumber != null)
                    hashCode = hashCode * 59 + BatchNumber.GetHashCode();
                if (TransactionNumber != null)
                    hashCode = hashCode * 59 + TransactionNumber.GetHashCode();
                if (Voided != null)
                    hashCode = hashCode * 59 + Voided.GetHashCode();
                if (Signature != null)
                    hashCode = hashCode * 59 + Signature.GetHashCode();
                if (CardData != null)
                    hashCode = hashCode * 59 + CardData.GetHashCode();
                if (Receipts != null)
                    hashCode = hashCode * 59 + Receipts.GetHashCode();
                if (GeneralResponse != null)
                    hashCode = hashCode * 59 + GeneralResponse.GetHashCode();
                return hashCode;
            }
        }
    }
}