/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     UserInputRequestContract
    /// </summary>
    [DataContract]
    public sealed class UserInputRequestContract : IEquatable<UserInputRequestContract>
    {
        /// <summary>
        ///     Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            ///     Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")] Number = 1,

            /// <summary>
            ///     Enum Letters for value: Letters
            /// </summary>
            [EnumMember(Value = "Letters")] Letters = 2,

            /// <summary>
            ///     Enum NumberAndLetters for value: NumberAndLetters
            /// </summary>
            [EnumMember(Value = "NumberAndLetters")]
            NumberAndLetters = 3,

            /// <summary>
            ///     Enum Currency for value: Currency
            /// </summary>
            [EnumMember(Value = "Currency")] Currency = 4,

            /// <summary>
            ///     Enum InfoOnly for value: InfoOnly
            /// </summary>
            [EnumMember(Value = "InfoOnly")] InfoOnly = 5,
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="UserInputRequestContract" /> class.
        /// </summary>
        /// <param name="title">title (required).</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="maxLength">maxLength.</param>
        /// <param name="hiddenInput">hiddenInput.</param>
        /// <param name="type">type (required).</param>
        /// <param name="tpn">Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment. (required).</param>
        /// <param name="authkey">Merchant&#x27;s authorization password. Required if no SPInToken..</param>
        /// <param name="sPInProxyTimeout">Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used..</param>
        public UserInputRequestContract(string title = default, int? timeout = default, int? maxLength = default, bool? hiddenInput = default,
            TypeEnum type = default, string tpn = default, string authkey = default, int? sPInProxyTimeout = default)
        {
            // to ensure "title" is required (not null)
            if (title == null)
                throw new InvalidDataException("title is a required property for UserInputRequestContract and cannot be null");
            Title = title;
            // to ensure "type" is required (not null)
            if (type == null)
                throw new InvalidDataException("type is a required property for UserInputRequestContract and cannot be null");
            Type = type;
            // to ensure "tpn" is required (not null)
            if (tpn == null)
                throw new InvalidDataException("tpn is a required property for UserInputRequestContract and cannot be null");
            Tpn = tpn;
            Timeout = timeout;
            MaxLength = maxLength;
            HiddenInput = hiddenInput;
            Authkey = authkey;
            SpInProxyTimeout = sPInProxyTimeout;
        }

        /// <summary>
        ///     Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        ///     Gets or Sets Title
        /// </summary>
        [DataMember(Name = "Title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        ///     Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "Timeout", EmitDefaultValue = false)]
        public int? Timeout { get; set; }

        /// <summary>
        ///     Gets or Sets MaxLength
        /// </summary>
        [DataMember(Name = "MaxLength", EmitDefaultValue = false)]
        public int? MaxLength { get; set; }

        /// <summary>
        ///     Gets or Sets HiddenInput
        /// </summary>
        [DataMember(Name = "HiddenInput", EmitDefaultValue = false)]
        public bool? HiddenInput { get; set; }


        /// <summary>
        ///     Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment.
        /// </summary>
        /// <value>Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment.</value>
        [DataMember(Name = "Tpn", EmitDefaultValue = false)]
        public string Tpn { get; set; }

        /// <summary>
        ///     Merchant&#x27;s authorization password. Required if no SPInToken.
        /// </summary>
        /// <value>Merchant&#x27;s authorization password. Required if no SPInToken.</value>
        [DataMember(Name = "Authkey", EmitDefaultValue = false)]
        public string Authkey { get; set; }

        /// <summary>
        ///     Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used.
        /// </summary>
        /// <value>Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used.</value>
        [DataMember(Name = "SPInProxyTimeout", EmitDefaultValue = false)]
        public int? SpInProxyTimeout { get; set; }

        /// <summary>
        ///     Returns true if UserInputRequestContract instances are equal
        /// </summary>
        /// <param name="input">Instance of UserInputRequestContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInputRequestContract input)
        {
            if (input == null)
                return false;

            return
                (
                    Title == input.Title ||
                    (Title != null &&
                     Title.Equals(input.Title))
                ) &&
                (
                    Timeout == input.Timeout ||
                    (Timeout != null &&
                     Timeout.Equals(input.Timeout))
                ) &&
                (
                    MaxLength == input.MaxLength ||
                    (MaxLength != null &&
                     MaxLength.Equals(input.MaxLength))
                ) &&
                (
                    HiddenInput == input.HiddenInput ||
                    (HiddenInput != null &&
                     HiddenInput.Equals(input.HiddenInput))
                ) &&
                (
                    Type == input.Type ||
                    (Type != null &&
                     Type.Equals(input.Type))
                ) &&
                (
                    Tpn == input.Tpn ||
                    (Tpn != null &&
                     Tpn.Equals(input.Tpn))
                ) &&
                (
                    Authkey == input.Authkey ||
                    (Authkey != null &&
                     Authkey.Equals(input.Authkey))
                ) &&
                (
                    SpInProxyTimeout == input.SpInProxyTimeout ||
                    (SpInProxyTimeout != null &&
                     SpInProxyTimeout.Equals(input.SpInProxyTimeout))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInputRequestContract {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  HiddenInput: ").Append(HiddenInput).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Tpn: ").Append(Tpn).Append("\n");
            sb.Append("  Authkey: ").Append(Authkey).Append("\n");
            sb.Append("  SPInProxyTimeout: ").Append(SpInProxyTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UserInputRequestContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                if (Timeout != null)
                    hashCode = hashCode * 59 + Timeout.GetHashCode();
                if (MaxLength != null)
                    hashCode = hashCode * 59 + MaxLength.GetHashCode();
                if (HiddenInput != null)
                    hashCode = hashCode * 59 + HiddenInput.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Tpn != null)
                    hashCode = hashCode * 59 + Tpn.GetHashCode();
                if (Authkey != null)
                    hashCode = hashCode * 59 + Authkey.GetHashCode();
                if (SpInProxyTimeout != null)
                    hashCode = hashCode * 59 + SpInProxyTimeout.GetHashCode();
                return hashCode;
            }
        }
    }
}