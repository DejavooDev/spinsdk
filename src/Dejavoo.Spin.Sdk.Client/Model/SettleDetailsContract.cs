/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     SettleDetailsContract
    /// </summary>
    [DataContract]
    public sealed class SettleDetailsContract : IEquatable<SettleDetailsContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SettleDetailsContract" /> class.
        /// </summary>
        /// <param name="application">application.</param>
        /// <param name="detailedMessage">detailedMessage.</param>
        /// <param name="hostStatus">hostStatus.</param>
        /// <param name="transactionsReports">transactionsReports.</param>
        /// <param name="receipt">receipt.</param>
        public SettleDetailsContract(string application = default, string detailedMessage = default, string hostStatus = default,
            SettleTransactionReportContract transactionsReports = default, string receipt = default)
        {
            Application = application;
            DetailedMessage = detailedMessage;
            HostStatus = hostStatus;
            TransactionsReports = transactionsReports;
            Receipt = receipt;
        }

        /// <summary>
        ///     Gets or Sets Application
        /// </summary>
        [DataMember(Name = "Application", EmitDefaultValue = false)]
        public string Application { get; set; }

        /// <summary>
        ///     Gets or Sets DetailedMessage
        /// </summary>
        [DataMember(Name = "DetailedMessage", EmitDefaultValue = false)]
        public string DetailedMessage { get; set; }

        /// <summary>
        ///     Gets or Sets HostStatus
        /// </summary>
        [DataMember(Name = "HostStatus", EmitDefaultValue = false)]
        public string HostStatus { get; set; }

        /// <summary>
        ///     Gets or Sets TransactionsReports
        /// </summary>
        [DataMember(Name = "TransactionsReports", EmitDefaultValue = false)]
        public SettleTransactionReportContract TransactionsReports { get; set; }

        /// <summary>
        ///     Gets or Sets Receipt
        /// </summary>
        [DataMember(Name = "Receipt", EmitDefaultValue = false)]
        public string Receipt { get; set; }

        /// <summary>
        ///     Returns true if SettleDetailsContract instances are equal
        /// </summary>
        /// <param name="input">Instance of SettleDetailsContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettleDetailsContract input)
        {
            if (input == null)
                return false;

            return
                (
                    Application == input.Application ||
                    (Application != null &&
                     Application.Equals(input.Application))
                ) &&
                (
                    DetailedMessage == input.DetailedMessage ||
                    (DetailedMessage != null &&
                     DetailedMessage.Equals(input.DetailedMessage))
                ) &&
                (
                    HostStatus == input.HostStatus ||
                    (HostStatus != null &&
                     HostStatus.Equals(input.HostStatus))
                ) &&
                (
                    TransactionsReports == input.TransactionsReports ||
                    (TransactionsReports != null &&
                     TransactionsReports.Equals(input.TransactionsReports))
                ) &&
                (
                    Receipt == input.Receipt ||
                    (Receipt != null &&
                     Receipt.Equals(input.Receipt))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettleDetailsContract {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  DetailedMessage: ").Append(DetailedMessage).Append("\n");
            sb.Append("  HostStatus: ").Append(HostStatus).Append("\n");
            sb.Append("  TransactionsReports: ").Append(TransactionsReports).Append("\n");
            sb.Append("  Receipt: ").Append(Receipt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SettleDetailsContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Application != null)
                    hashCode = hashCode * 59 + Application.GetHashCode();
                if (DetailedMessage != null)
                    hashCode = hashCode * 59 + DetailedMessage.GetHashCode();
                if (HostStatus != null)
                    hashCode = hashCode * 59 + HostStatus.GetHashCode();
                if (TransactionsReports != null)
                    hashCode = hashCode * 59 + TransactionsReports.GetHashCode();
                if (Receipt != null)
                    hashCode = hashCode * 59 + Receipt.GetHashCode();
                return hashCode;
            }
        }
    }
}