/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     GeneralResponseContract
    /// </summary>
    [DataContract]
    public sealed class GeneralResponseContract : IEquatable<GeneralResponseContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="GeneralResponseContract" /> class.
        /// </summary>
        /// <param name="resultCode">General result code [0 - Success result, 1 - Error on terminal, 2 - Error on SPIn proxy side].</param>
        /// <param name="statusCode">Indicates 4-digit response code for specific situation..</param>
        /// <param name="message">Text message that describes response..</param>
        /// <param name="detailedMessage">More detailed message that describes response..</param>
        public GeneralResponseContract(string resultCode = default, string statusCode = default, string message = default,
            string detailedMessage = default)
        {
            ResultCode = resultCode;
            StatusCode = statusCode;
            Message = message;
            DetailedMessage = detailedMessage;
        }

        /// <summary>
        ///     General result code [0 - Success result, 1 - Error on terminal, 2 - Error on SPIn proxy side]
        /// </summary>
        /// <value>General result code [0 - Success result, 1 - Error on terminal, 2 - Error on SPIn proxy side]</value>
        [DataMember(Name = "ResultCode", EmitDefaultValue = false)]
        public string ResultCode { get; set; }

        /// <summary>
        ///     Indicates 4-digit response code for specific situation.
        /// </summary>
        /// <value>Indicates 4-digit response code for specific situation.</value>
        [DataMember(Name = "StatusCode", EmitDefaultValue = false)]
        public string StatusCode { get; set; }

        /// <summary>
        ///     Text message that describes response.
        /// </summary>
        /// <value>Text message that describes response.</value>
        [DataMember(Name = "Message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        ///     More detailed message that describes response.
        /// </summary>
        /// <value>More detailed message that describes response.</value>
        [DataMember(Name = "DetailedMessage", EmitDefaultValue = false)]
        public string DetailedMessage { get; set; }

        /// <summary>
        ///     Returns true if GeneralResponseContract instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralResponseContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralResponseContract input)
        {
            if (input == null)
                return false;

            return
                (
                    ResultCode == input.ResultCode ||
                    (ResultCode != null &&
                     ResultCode.Equals(input.ResultCode))
                ) &&
                (
                    StatusCode == input.StatusCode ||
                    (StatusCode != null &&
                     StatusCode.Equals(input.StatusCode))
                ) &&
                (
                    Message == input.Message ||
                    (Message != null &&
                     Message.Equals(input.Message))
                ) &&
                (
                    DetailedMessage == input.DetailedMessage ||
                    (DetailedMessage != null &&
                     DetailedMessage.Equals(input.DetailedMessage))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneralResponseContract {\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  DetailedMessage: ").Append(DetailedMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as GeneralResponseContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ResultCode != null)
                    hashCode = hashCode * 59 + ResultCode.GetHashCode();
                if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (DetailedMessage != null)
                    hashCode = hashCode * 59 + DetailedMessage.GetHashCode();
                return hashCode;
            }
        }
    }
}