/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     StatusListRequestContract
    /// </summary>
    [DataContract]
    public sealed class StatusListRequestContract : IEquatable<StatusListRequestContract>
    {
        /// <summary>
        ///     Defines PaymentType
        /// </summary>
        [System.Text.Json.Serialization.JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            ///     Enum Credit for value: Credit
            /// </summary>
            [EnumMember(Value = "Credit")] Credit = 1,

            /// <summary>
            ///     Enum Debit for value: Debit
            /// </summary>
            [EnumMember(Value = "Debit")] Debit = 2,

            /// <summary>
            ///     Enum EBT for value: EBT
            /// </summary>
            [EnumMember(Value = "EBT")] Ebt = 3,

            /// <summary>
            ///     Enum Card for value: Card
            /// </summary>
            [EnumMember(Value = "Card")] Card = 4,

            /// <summary>
            ///     Enum Cash for value: Cash
            /// </summary>
            [EnumMember(Value = "Cash")] Cash = 5,

            /// <summary>
            ///     Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")] Check = 6,

            /// <summary>
            ///     Enum Gift for value: Gift
            /// </summary>
            [EnumMember(Value = "Gift")] Gift = 7,
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="StatusListRequestContract" /> class.
        /// </summary>
        /// <param name="paymentType">paymentType (required).</param>
        /// <param name="transactionFromIndex">transactionFromIndex (required).</param>
        /// <param name="transactionToIndex">transactionToIndex (required).</param>
        /// <param name="tpn">Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment. (required).</param>
        /// <param name="authkey">Merchant&#x27;s authorization password. Required if no SPInToken..</param>
        /// <param name="sPInProxyTimeout">Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used..</param>
        public StatusListRequestContract(PaymentTypeEnum paymentType = default, int? transactionFromIndex = default,
            int? transactionToIndex = default, string tpn = default, string authkey = default, int? sPInProxyTimeout = default)
        {
            // to ensure "paymentType" is required (not null)
            if (paymentType == null)
                throw new InvalidDataException("paymentType is a required property for StatusListRequestContract and cannot be null");
            PaymentType = paymentType;
            // to ensure "transactionFromIndex" is required (not null)
            if (transactionFromIndex == null)
                throw new InvalidDataException("transactionFromIndex is a required property for StatusListRequestContract and cannot be null");
            TransactionFromIndex = transactionFromIndex;
            // to ensure "transactionToIndex" is required (not null)
            if (transactionToIndex == null)
                throw new InvalidDataException("transactionToIndex is a required property for StatusListRequestContract and cannot be null");
            TransactionToIndex = transactionToIndex;
            // to ensure "tpn" is required (not null)
            if (tpn == null)
                throw new InvalidDataException("tpn is a required property for StatusListRequestContract and cannot be null");
            Tpn = tpn;
            Authkey = authkey;
            SpInProxyTimeout = sPInProxyTimeout;
        }

        /// <summary>
        ///     Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "PaymentType", EmitDefaultValue = false)]
        public PaymentTypeEnum PaymentType { get; set; }


        /// <summary>
        ///     Gets or Sets TransactionFromIndex
        /// </summary>
        [DataMember(Name = "TransactionFromIndex", EmitDefaultValue = false)]
        public int? TransactionFromIndex { get; set; }

        /// <summary>
        ///     Gets or Sets TransactionToIndex
        /// </summary>
        [DataMember(Name = "TransactionToIndex", EmitDefaultValue = false)]
        public int? TransactionToIndex { get; set; }

        /// <summary>
        ///     Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment.
        /// </summary>
        /// <value>Terminal profile number.  Can be used to identify the terminal in SPIn Proxy environment.</value>
        [DataMember(Name = "Tpn", EmitDefaultValue = false)]
        public string Tpn { get; set; }

        /// <summary>
        ///     Merchant&#x27;s authorization password. Required if no SPInToken.
        /// </summary>
        /// <value>Merchant&#x27;s authorization password. Required if no SPInToken.</value>
        [DataMember(Name = "Authkey", EmitDefaultValue = false)]
        public string Authkey { get; set; }

        /// <summary>
        ///     Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used.
        /// </summary>
        /// <value>Timeout for processing transaction with SPIn proxy. If null, the default timeout will be used.</value>
        [DataMember(Name = "SPInProxyTimeout", EmitDefaultValue = false)]
        public int? SpInProxyTimeout { get; set; }

        /// <summary>
        ///     Returns true if StatusListRequestContract instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusListRequestContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusListRequestContract input)
        {
            if (input == null)
                return false;

            return
                (
                    PaymentType == input.PaymentType ||
                    (PaymentType != null &&
                     PaymentType.Equals(input.PaymentType))
                ) &&
                (
                    TransactionFromIndex == input.TransactionFromIndex ||
                    (TransactionFromIndex != null &&
                     TransactionFromIndex.Equals(input.TransactionFromIndex))
                ) &&
                (
                    TransactionToIndex == input.TransactionToIndex ||
                    (TransactionToIndex != null &&
                     TransactionToIndex.Equals(input.TransactionToIndex))
                ) &&
                (
                    Tpn == input.Tpn ||
                    (Tpn != null &&
                     Tpn.Equals(input.Tpn))
                ) &&
                (
                    Authkey == input.Authkey ||
                    (Authkey != null &&
                     Authkey.Equals(input.Authkey))
                ) &&
                (
                    SpInProxyTimeout == input.SpInProxyTimeout ||
                    (SpInProxyTimeout != null &&
                     SpInProxyTimeout.Equals(input.SpInProxyTimeout))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusListRequestContract {\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  TransactionFromIndex: ").Append(TransactionFromIndex).Append("\n");
            sb.Append("  TransactionToIndex: ").Append(TransactionToIndex).Append("\n");
            sb.Append("  Tpn: ").Append(Tpn).Append("\n");
            sb.Append("  Authkey: ").Append(Authkey).Append("\n");
            sb.Append("  SPInProxyTimeout: ").Append(SpInProxyTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as StatusListRequestContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PaymentType != null)
                    hashCode = hashCode * 59 + PaymentType.GetHashCode();
                if (TransactionFromIndex != null)
                    hashCode = hashCode * 59 + TransactionFromIndex.GetHashCode();
                if (TransactionToIndex != null)
                    hashCode = hashCode * 59 + TransactionToIndex.GetHashCode();
                if (Tpn != null)
                    hashCode = hashCode * 59 + Tpn.GetHashCode();
                if (Authkey != null)
                    hashCode = hashCode * 59 + Authkey.GetHashCode();
                if (SpInProxyTimeout != null)
                    hashCode = hashCode * 59 + SpInProxyTimeout.GetHashCode();
                return hashCode;
            }
        }
    }
}