/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     SettleTransactionReportContract
    /// </summary>
    [DataContract]
    public sealed class SettleTransactionReportContract : IEquatable<SettleTransactionReportContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SettleTransactionReportContract" /> class.
        /// </summary>
        /// <param name="transactionsCount">transactionsCount.</param>
        /// <param name="saleAmount">saleAmount.</param>
        /// <param name="returnAmount">returnAmount.</param>
        /// <param name="voidAmount">voidAmount.</param>
        /// <param name="authAmount">authAmount.</param>
        /// <param name="totalAmount">totalAmount.</param>
        public SettleTransactionReportContract(int? transactionsCount = default, double? saleAmount = default, double? returnAmount = default,
            double? voidAmount = default, double? authAmount = default, double? totalAmount = default)
        {
            TransactionsCount = transactionsCount;
            SaleAmount = saleAmount;
            ReturnAmount = returnAmount;
            VoidAmount = voidAmount;
            AuthAmount = authAmount;
            TotalAmount = totalAmount;
        }

        /// <summary>
        ///     Gets or Sets TransactionsCount
        /// </summary>
        [DataMember(Name = "TransactionsCount", EmitDefaultValue = false)]
        public int? TransactionsCount { get; set; }

        /// <summary>
        ///     Gets or Sets SaleAmount
        /// </summary>
        [DataMember(Name = "SaleAmount", EmitDefaultValue = false)]
        public double? SaleAmount { get; set; }

        /// <summary>
        ///     Gets or Sets ReturnAmount
        /// </summary>
        [DataMember(Name = "ReturnAmount", EmitDefaultValue = false)]
        public double? ReturnAmount { get; set; }

        /// <summary>
        ///     Gets or Sets VoidAmount
        /// </summary>
        [DataMember(Name = "VoidAmount", EmitDefaultValue = false)]
        public double? VoidAmount { get; set; }

        /// <summary>
        ///     Gets or Sets AuthAmount
        /// </summary>
        [DataMember(Name = "AuthAmount", EmitDefaultValue = false)]
        public double? AuthAmount { get; set; }

        /// <summary>
        ///     Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "TotalAmount", EmitDefaultValue = false)]
        public double? TotalAmount { get; set; }

        /// <summary>
        ///     Returns true if SettleTransactionReportContract instances are equal
        /// </summary>
        /// <param name="input">Instance of SettleTransactionReportContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettleTransactionReportContract input)
        {
            if (input == null)
                return false;

            return
                (
                    TransactionsCount == input.TransactionsCount ||
                    (TransactionsCount != null &&
                     TransactionsCount.Equals(input.TransactionsCount))
                ) &&
                (
                    SaleAmount == input.SaleAmount ||
                    (SaleAmount != null &&
                     SaleAmount.Equals(input.SaleAmount))
                ) &&
                (
                    ReturnAmount == input.ReturnAmount ||
                    (ReturnAmount != null &&
                     ReturnAmount.Equals(input.ReturnAmount))
                ) &&
                (
                    VoidAmount == input.VoidAmount ||
                    (VoidAmount != null &&
                     VoidAmount.Equals(input.VoidAmount))
                ) &&
                (
                    AuthAmount == input.AuthAmount ||
                    (AuthAmount != null &&
                     AuthAmount.Equals(input.AuthAmount))
                ) &&
                (
                    TotalAmount == input.TotalAmount ||
                    (TotalAmount != null &&
                     TotalAmount.Equals(input.TotalAmount))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettleTransactionReportContract {\n");
            sb.Append("  TransactionsCount: ").Append(TransactionsCount).Append("\n");
            sb.Append("  SaleAmount: ").Append(SaleAmount).Append("\n");
            sb.Append("  ReturnAmount: ").Append(ReturnAmount).Append("\n");
            sb.Append("  VoidAmount: ").Append(VoidAmount).Append("\n");
            sb.Append("  AuthAmount: ").Append(AuthAmount).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SettleTransactionReportContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (TransactionsCount != null)
                    hashCode = hashCode * 59 + TransactionsCount.GetHashCode();
                if (SaleAmount != null)
                    hashCode = hashCode * 59 + SaleAmount.GetHashCode();
                if (ReturnAmount != null)
                    hashCode = hashCode * 59 + ReturnAmount.GetHashCode();
                if (VoidAmount != null)
                    hashCode = hashCode * 59 + VoidAmount.GetHashCode();
                if (AuthAmount != null)
                    hashCode = hashCode * 59 + AuthAmount.GetHashCode();
                if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                return hashCode;
            }
        }
    }
}