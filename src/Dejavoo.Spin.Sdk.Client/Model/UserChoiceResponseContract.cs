/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Dejavoo.Spin.Sdk.Client.Model
{
    /// <summary>
    ///     UserChoiceResponseContract
    /// </summary>
    [DataContract]
    public sealed class UserChoiceResponseContract : IEquatable<UserChoiceResponseContract>
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="UserChoiceResponseContract" /> class.
        /// </summary>
        /// <param name="selectedOption">selectedOption.</param>
        /// <param name="generalResponse">generalResponse.</param>
        public UserChoiceResponseContract(string selectedOption = default, GeneralResponseContract generalResponse = default)
        {
            SelectedOption = selectedOption;
            GeneralResponse = generalResponse;
        }

        /// <summary>
        ///     Gets or Sets SelectedOption
        /// </summary>
        [DataMember(Name = "SelectedOption", EmitDefaultValue = false)]
        public string SelectedOption { get; set; }

        /// <summary>
        ///     Gets or Sets GeneralResponse
        /// </summary>
        [DataMember(Name = "GeneralResponse", EmitDefaultValue = false)]
        public GeneralResponseContract GeneralResponse { get; set; }

        /// <summary>
        ///     Returns true if UserChoiceResponseContract instances are equal
        /// </summary>
        /// <param name="input">Instance of UserChoiceResponseContract to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserChoiceResponseContract input)
        {
            if (input == null)
                return false;

            return
                (
                    SelectedOption == input.SelectedOption ||
                    (SelectedOption != null &&
                     SelectedOption.Equals(input.SelectedOption))
                ) &&
                (
                    GeneralResponse == input.GeneralResponse ||
                    (GeneralResponse != null &&
                     GeneralResponse.Equals(input.GeneralResponse))
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserChoiceResponseContract {\n");
            sb.Append("  SelectedOption: ").Append(SelectedOption).Append("\n");
            sb.Append("  GeneralResponse: ").Append(GeneralResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as UserChoiceResponseContract);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SelectedOption != null)
                    hashCode = hashCode * 59 + SelectedOption.GetHashCode();
                if (GeneralResponse != null)
                    hashCode = hashCode * 59 + GeneralResponse.GetHashCode();
                return hashCode;
            }
        }
    }
}