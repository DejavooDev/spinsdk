/* 
 * SPInAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Dejavoo.Spin.Sdk.Client.Client;
using Dejavoo.Spin.Sdk.Client.Model;
using RestSharp;

namespace Dejavoo.Spin.Sdk.Client.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegisterApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PrinterResponseContract</returns>
        PrinterResponseContract RegisterPrinter(PrinterRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PrinterResponseContract</returns>
        ApiResponse<PrinterResponseContract> RegisterPrinterWithHttpInfo(PrinterRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>PrinterResponseContract</returns>
        PrinterResponseContract RegisterPrinter(string printer, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of PrinterResponseContract</returns>
        ApiResponse<PrinterResponseContract> RegisterPrinterWithHttpInfo(string printer, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterReturn(ReturnRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterReturnWithHttpInfo(ReturnRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterReturn(double? amount, string paymentType, string referenceId, string printReceipt, string getReceipt,
            int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterReturnWithHttpInfo(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterSale(SaleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterSaleWithHttpInfo(SaleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterSale(double? amount, double? tipAmount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterSaleWithHttpInfo(double? amount, double? tipAmount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SettleResponseContract</returns>
        SettleResponseContract RegisterSettle(SettleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SettleResponseContract</returns>
        ApiResponse<SettleResponseContract> RegisterSettleWithHttpInfo(SettleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>SettleResponseContract</returns>
        SettleResponseContract RegisterSettle(string referenceId, bool? getReceipt, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of SettleResponseContract</returns>
        ApiResponse<SettleResponseContract> RegisterSettleWithHttpInfo(string referenceId, bool? getReceipt, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterStatus(StatusRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterStatusWithHttpInfo(StatusRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterStatus(string paymentType, string referenceId, string printReceipt, string getReceipt,
            int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterStatusWithHttpInfo(string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusListResponseContract</returns>
        StatusListResponseContract RegisterStatusList(StatusListRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusListResponseContract</returns>
        ApiResponse<StatusListResponseContract> RegisterStatusListWithHttpInfo(StatusListRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>StatusListResponseContract</returns>
        StatusListResponseContract RegisterStatusList(string paymentType, int? transactionFromIndex, int? transactionToIndex, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of StatusListResponseContract</returns>
        ApiResponse<StatusListResponseContract> RegisterStatusListWithHttpInfo(string paymentType, int? transactionFromIndex, int? transactionToIndex,
            string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterTipAdjust(TipAdjustRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterTipAdjustWithHttpInfo(TipAdjustRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterTipAdjust(double? amount, double? tipAmount, string cardLast4, string paymentType, string referenceId,
            int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterTipAdjustWithHttpInfo(double? amount, double? tipAmount, string cardLast4,
            string paymentType, string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserChoiceResponseContract</returns>
        UserChoiceResponseContract RegisterUserChoice(UserChoiceRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserChoiceResponseContract</returns>
        ApiResponse<UserChoiceResponseContract> RegisterUserChoiceWithHttpInfo(UserChoiceRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>UserChoiceResponseContract</returns>
        UserChoiceResponseContract RegisterUserChoice(string title, List<string> choiceOptions, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of UserChoiceResponseContract</returns>
        ApiResponse<UserChoiceResponseContract> RegisterUserChoiceWithHttpInfo(string title, List<string> choiceOptions, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserInputResponseContract</returns>
        UserInputResponseContract RegisterUserInput(UserInputRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserInputResponseContract</returns>
        ApiResponse<UserInputResponseContract> RegisterUserInputWithHttpInfo(UserInputRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>UserInputResponseContract</returns>
        UserInputResponseContract RegisterUserInput(string title, int? timeout, int? maxLength, bool? hiddenInput, string type, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of UserInputResponseContract</returns>
        ApiResponse<UserInputResponseContract> RegisterUserInputWithHttpInfo(string title, int? timeout, int? maxLength, bool? hiddenInput,
            string type, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterVoid(VoidRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterVoidWithHttpInfo(VoidRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        BasePaymentResponseContract RegisterVoid(double? amount, string paymentType, string referenceId, string printReceipt, string getReceipt,
            int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        ApiResponse<BasePaymentResponseContract> RegisterVoidWithHttpInfo(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PrinterResponseContract</returns>
        Task<PrinterResponseContract> RegisterPrinterAsync(PrinterRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PrinterResponseContract)</returns>
        Task<ApiResponse<PrinterResponseContract>> RegisterPrinterAsyncWithHttpInfo(PrinterRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of PrinterResponseContract</returns>
        Task<PrinterResponseContract> RegisterPrinterAsync(string printer, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (PrinterResponseContract)</returns>
        Task<ApiResponse<PrinterResponseContract>>
            RegisterPrinterAsyncWithHttpInfo(string printer, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterReturnAsync(ReturnRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterReturnAsyncWithHttpInfo(ReturnRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterReturnAsync(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterReturnAsyncWithHttpInfo(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterSaleAsync(SaleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterSaleAsyncWithHttpInfo(SaleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterSaleAsync(double? amount, double? tipAmount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterSaleAsyncWithHttpInfo(double? amount, double? tipAmount, string paymentType,
            string referenceId, string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SettleResponseContract</returns>
        Task<SettleResponseContract> RegisterSettleAsync(SettleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SettleResponseContract)</returns>
        Task<ApiResponse<SettleResponseContract>> RegisterSettleAsyncWithHttpInfo(SettleRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of SettleResponseContract</returns>
        Task<SettleResponseContract> RegisterSettleAsync(string referenceId, bool? getReceipt, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (SettleResponseContract)</returns>
        Task<ApiResponse<SettleResponseContract>> RegisterSettleAsyncWithHttpInfo(string referenceId, bool? getReceipt, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterStatusAsync(StatusRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterStatusAsyncWithHttpInfo(StatusRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterStatusAsync(string paymentType, string referenceId, string printReceipt, string getReceipt,
            int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterStatusAsyncWithHttpInfo(string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusListResponseContract</returns>
        Task<StatusListResponseContract> RegisterStatusListAsync(StatusListRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusListResponseContract)</returns>
        Task<ApiResponse<StatusListResponseContract>> RegisterStatusListAsyncWithHttpInfo(StatusListRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of StatusListResponseContract</returns>
        Task<StatusListResponseContract> RegisterStatusListAsync(string paymentType, int? transactionFromIndex, int? transactionToIndex, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (StatusListResponseContract)</returns>
        Task<ApiResponse<StatusListResponseContract>> RegisterStatusListAsyncWithHttpInfo(string paymentType, int? transactionFromIndex,
            int? transactionToIndex, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterTipAdjustAsync(TipAdjustRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterTipAdjustAsyncWithHttpInfo(TipAdjustRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterTipAdjustAsync(double? amount, double? tipAmount, string cardLast4, string paymentType,
            string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterTipAdjustAsyncWithHttpInfo(double? amount, double? tipAmount, string cardLast4,
            string paymentType, string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserChoiceResponseContract</returns>
        Task<UserChoiceResponseContract> RegisterUserChoiceAsync(UserChoiceRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserChoiceResponseContract)</returns>
        Task<ApiResponse<UserChoiceResponseContract>> RegisterUserChoiceAsyncWithHttpInfo(UserChoiceRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of UserChoiceResponseContract</returns>
        Task<UserChoiceResponseContract> RegisterUserChoiceAsync(string title, List<string> choiceOptions, string tpn, string authkey,
            int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (UserChoiceResponseContract)</returns>
        Task<ApiResponse<UserChoiceResponseContract>> RegisterUserChoiceAsyncWithHttpInfo(string title, List<string> choiceOptions, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserInputResponseContract</returns>
        Task<UserInputResponseContract> RegisterUserInputAsync(UserInputRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserInputResponseContract)</returns>
        Task<ApiResponse<UserInputResponseContract>> RegisterUserInputAsyncWithHttpInfo(UserInputRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of UserInputResponseContract</returns>
        Task<UserInputResponseContract> RegisterUserInputAsync(string title, int? timeout, int? maxLength, bool? hiddenInput, string type, string tpn,
            string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (UserInputResponseContract)</returns>
        Task<ApiResponse<UserInputResponseContract>> RegisterUserInputAsyncWithHttpInfo(string title, int? timeout, int? maxLength, bool? hiddenInput,
            string type, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterVoidAsync(VoidRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterVoidAsyncWithHttpInfo(VoidRequestContract body);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        Task<BasePaymentResponseContract> RegisterVoidAsync(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        Task<ApiResponse<BasePaymentResponseContract>> RegisterVoidAsyncWithHttpInfo(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RegisterApi : IRegisterApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="RegisterApi" /> class.
        /// </summary>
        /// <returns></returns>
        public RegisterApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RegisterApi" /> class
        /// </summary>
        /// <returns></returns>
        public RegisterApi()
        {
            Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="RegisterApi" /> class
        ///     using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegisterApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>PrinterResponseContract</returns>
        public PrinterResponseContract RegisterPrinter(PrinterRequestContract body)
        {
            var localVarResponse = RegisterPrinterWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PrinterResponseContract</returns>
        public ApiResponse<PrinterResponseContract> RegisterPrinterWithHttpInfo(PrinterRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterPrinter");

            var localVarPath = "/v2/Common/Printer";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrinterResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of PrinterResponseContract</returns>
        public async Task<PrinterResponseContract> RegisterPrinterAsync(PrinterRequestContract body)
        {
            var localVarResponse = await RegisterPrinterAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PrinterResponseContract)</returns>
        public async Task<ApiResponse<PrinterResponseContract>> RegisterPrinterAsyncWithHttpInfo(PrinterRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterPrinter");

            var localVarPath = "/v2/Common/Printer";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrinterResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>PrinterResponseContract</returns>
        public PrinterResponseContract RegisterPrinter(string printer, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterPrinterWithHttpInfo(printer, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of PrinterResponseContract</returns>
        public ApiResponse<PrinterResponseContract> RegisterPrinterWithHttpInfo(string printer, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterPrinter");

            var localVarPath = "/v2/Common/Printer";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarFormParams.Add("Printer", Configuration.ApiClient.ParameterToString(printer)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrinterResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of PrinterResponseContract</returns>
        public async Task<PrinterResponseContract> RegisterPrinterAsync(string printer, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterPrinterAsyncWithHttpInfo(printer, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="printer"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (PrinterResponseContract)</returns>
        public async Task<ApiResponse<PrinterResponseContract>> RegisterPrinterAsyncWithHttpInfo(string printer, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            // verify the required parameter 'printer' is set
            if (printer == null)
                throw new ApiException(400, "Missing required parameter 'printer' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterPrinter");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterPrinter");

            var localVarPath = "/v2/Common/Printer";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printer != null) localVarFormParams.Add("Printer", Configuration.ApiClient.ParameterToString(printer)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterPrinter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrinterResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PrinterResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrinterResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterReturn(ReturnRequestContract body)
        {
            var localVarResponse = RegisterReturnWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterReturnWithHttpInfo(ReturnRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterReturn");

            var localVarPath = "/v2/Payment/Return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterReturnAsync(ReturnRequestContract body)
        {
            var localVarResponse = await RegisterReturnAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterReturnAsyncWithHttpInfo(ReturnRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterReturn");

            var localVarPath = "/v2/Payment/Return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterReturn(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterReturnWithHttpInfo(amount, paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                invoiceNumber, captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterReturnWithHttpInfo(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new ApiException(400, "Missing required parameter 'invoiceNumber' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterReturn");

            var localVarPath = "/v2/Payment/Return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (invoiceNumber != null)
                localVarFormParams.Add("InvoiceNumber", Configuration.ApiClient.ParameterToString(invoiceNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterReturnAsync(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterReturnAsyncWithHttpInfo(amount, paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                invoiceNumber, captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterReturnAsyncWithHttpInfo(double? amount, string paymentType,
            string referenceId, string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new ApiException(400, "Missing required parameter 'invoiceNumber' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterReturn");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterReturn");

            var localVarPath = "/v2/Payment/Return";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (invoiceNumber != null)
                localVarFormParams.Add("InvoiceNumber", Configuration.ApiClient.ParameterToString(invoiceNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterReturn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterSale(SaleRequestContract body)
        {
            var localVarResponse = RegisterSaleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterSaleWithHttpInfo(SaleRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterSale");

            var localVarPath = "/v2/Payment/Sale";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterSaleAsync(SaleRequestContract body)
        {
            var localVarResponse = await RegisterSaleAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterSaleAsyncWithHttpInfo(SaleRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterSale");

            var localVarPath = "/v2/Payment/Sale";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterSale(double? amount, double? tipAmount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterSaleWithHttpInfo(amount, tipAmount, paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                invoiceNumber, captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterSaleWithHttpInfo(double? amount, double? tipAmount, string paymentType,
            string referenceId, string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'tipAmount' is set
            if (tipAmount == null)
                throw new ApiException(400, "Missing required parameter 'tipAmount' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new ApiException(400, "Missing required parameter 'invoiceNumber' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterSale");

            var localVarPath = "/v2/Payment/Sale";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (tipAmount != null) localVarFormParams.Add("TipAmount", Configuration.ApiClient.ParameterToString(tipAmount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (invoiceNumber != null)
                localVarFormParams.Add("InvoiceNumber", Configuration.ApiClient.ParameterToString(invoiceNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterSaleAsync(double? amount, double? tipAmount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterSaleAsyncWithHttpInfo(amount, tipAmount, paymentType, referenceId, printReceipt, getReceipt,
                merchantNumber, invoiceNumber, captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="invoiceNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterSaleAsyncWithHttpInfo(double? amount, double? tipAmount,
            string paymentType, string referenceId, string printReceipt, string getReceipt, int? merchantNumber, string invoiceNumber,
            bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'tipAmount' is set
            if (tipAmount == null)
                throw new ApiException(400, "Missing required parameter 'tipAmount' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'invoiceNumber' is set
            if (invoiceNumber == null)
                throw new ApiException(400, "Missing required parameter 'invoiceNumber' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterSale");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterSale");

            var localVarPath = "/v2/Payment/Sale";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (tipAmount != null) localVarFormParams.Add("TipAmount", Configuration.ApiClient.ParameterToString(tipAmount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (invoiceNumber != null)
                localVarFormParams.Add("InvoiceNumber", Configuration.ApiClient.ParameterToString(invoiceNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SettleResponseContract</returns>
        public SettleResponseContract RegisterSettle(SettleRequestContract body)
        {
            var localVarResponse = RegisterSettleWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SettleResponseContract</returns>
        public ApiResponse<SettleResponseContract> RegisterSettleWithHttpInfo(SettleRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterSettle");

            var localVarPath = "/v2/Payment/Settle";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettleResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettleResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettleResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SettleResponseContract</returns>
        public async Task<SettleResponseContract> RegisterSettleAsync(SettleRequestContract body)
        {
            var localVarResponse = await RegisterSettleAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SettleResponseContract)</returns>
        public async Task<ApiResponse<SettleResponseContract>> RegisterSettleAsyncWithHttpInfo(SettleRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterSettle");

            var localVarPath = "/v2/Payment/Settle";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettleResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettleResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettleResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>SettleResponseContract</returns>
        public SettleResponseContract RegisterSettle(string referenceId, bool? getReceipt, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterSettleWithHttpInfo(referenceId, getReceipt, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of SettleResponseContract</returns>
        public ApiResponse<SettleResponseContract> RegisterSettleWithHttpInfo(string referenceId, bool? getReceipt, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterSettle");

            var localVarPath = "/v2/Payment/Settle";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettleResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettleResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettleResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of SettleResponseContract</returns>
        public async Task<SettleResponseContract> RegisterSettleAsync(string referenceId, bool? getReceipt, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterSettleAsyncWithHttpInfo(referenceId, getReceipt, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="referenceId"></param>
        /// <param name="getReceipt"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (SettleResponseContract)</returns>
        public async Task<ApiResponse<SettleResponseContract>> RegisterSettleAsyncWithHttpInfo(string referenceId, bool? getReceipt, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterSettle");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterSettle");

            var localVarPath = "/v2/Payment/Settle";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterSettle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SettleResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SettleResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(SettleResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterStatus(StatusRequestContract body)
        {
            var localVarResponse = RegisterStatusWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterStatusWithHttpInfo(StatusRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterStatus");

            var localVarPath = "/v2/Payment/Status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterStatusAsync(StatusRequestContract body)
        {
            var localVarResponse = await RegisterStatusAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterStatusAsyncWithHttpInfo(StatusRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterStatus");

            var localVarPath = "/v2/Payment/Status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterStatus(string paymentType, string referenceId, string printReceipt, string getReceipt,
            int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterStatusWithHttpInfo(paymentType, referenceId, printReceipt, getReceipt, merchantNumber, captureSignature,
                tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterStatusWithHttpInfo(string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterStatus");

            var localVarPath = "/v2/Payment/Status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterStatusAsync(string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterStatusAsyncWithHttpInfo(paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterStatusAsyncWithHttpInfo(string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterStatus");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterStatus");

            var localVarPath = "/v2/Payment/Status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusListResponseContract</returns>
        public StatusListResponseContract RegisterStatusList(StatusListRequestContract body)
        {
            var localVarResponse = RegisterStatusListWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusListResponseContract</returns>
        public ApiResponse<StatusListResponseContract> RegisterStatusListWithHttpInfo(StatusListRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterStatusList");

            var localVarPath = "/v2/Payment/StatusList";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusListResponseContract</returns>
        public async Task<StatusListResponseContract> RegisterStatusListAsync(StatusListRequestContract body)
        {
            var localVarResponse = await RegisterStatusListAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusListResponseContract)</returns>
        public async Task<ApiResponse<StatusListResponseContract>> RegisterStatusListAsyncWithHttpInfo(StatusListRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterStatusList");

            var localVarPath = "/v2/Payment/StatusList";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>StatusListResponseContract</returns>
        public StatusListResponseContract RegisterStatusList(string paymentType, int? transactionFromIndex, int? transactionToIndex, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse =
                RegisterStatusListWithHttpInfo(paymentType, transactionFromIndex, transactionToIndex, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of StatusListResponseContract</returns>
        public ApiResponse<StatusListResponseContract> RegisterStatusListWithHttpInfo(string paymentType, int? transactionFromIndex,
            int? transactionToIndex, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'transactionFromIndex' is set
            if (transactionFromIndex == null)
                throw new ApiException(400, "Missing required parameter 'transactionFromIndex' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'transactionToIndex' is set
            if (transactionToIndex == null)
                throw new ApiException(400, "Missing required parameter 'transactionToIndex' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterStatusList");

            var localVarPath = "/v2/Payment/StatusList";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (transactionFromIndex != null)
                localVarFormParams.Add("TransactionFromIndex", Configuration.ApiClient.ParameterToString(transactionFromIndex)); // form parameter
            if (transactionToIndex != null)
                localVarFormParams.Add("TransactionToIndex", Configuration.ApiClient.ParameterToString(transactionToIndex)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of StatusListResponseContract</returns>
        public async Task<StatusListResponseContract> RegisterStatusListAsync(string paymentType, int? transactionFromIndex, int? transactionToIndex,
            string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse =
                await RegisterStatusListAsyncWithHttpInfo(paymentType, transactionFromIndex, transactionToIndex, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentType"></param>
        /// <param name="transactionFromIndex"></param>
        /// <param name="transactionToIndex"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (StatusListResponseContract)</returns>
        public async Task<ApiResponse<StatusListResponseContract>> RegisterStatusListAsyncWithHttpInfo(string paymentType, int? transactionFromIndex,
            int? transactionToIndex, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'transactionFromIndex' is set
            if (transactionFromIndex == null)
                throw new ApiException(400, "Missing required parameter 'transactionFromIndex' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'transactionToIndex' is set
            if (transactionToIndex == null)
                throw new ApiException(400, "Missing required parameter 'transactionToIndex' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterStatusList");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterStatusList");

            var localVarPath = "/v2/Payment/StatusList";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (transactionFromIndex != null)
                localVarFormParams.Add("TransactionFromIndex", Configuration.ApiClient.ParameterToString(transactionFromIndex)); // form parameter
            if (transactionToIndex != null)
                localVarFormParams.Add("TransactionToIndex", Configuration.ApiClient.ParameterToString(transactionToIndex)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterStatusList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterTipAdjust(TipAdjustRequestContract body)
        {
            var localVarResponse = RegisterTipAdjustWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterTipAdjustWithHttpInfo(TipAdjustRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterTipAdjust");

            var localVarPath = "/v2/Payment/TipAdjust";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterTipAdjust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterTipAdjustAsync(TipAdjustRequestContract body)
        {
            var localVarResponse = await RegisterTipAdjustAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterTipAdjustAsyncWithHttpInfo(TipAdjustRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterTipAdjust");

            var localVarPath = "/v2/Payment/TipAdjust";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterTipAdjust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterTipAdjust(double? amount, double? tipAmount, string cardLast4, string paymentType,
            string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterTipAdjustWithHttpInfo(amount, tipAmount, cardLast4, paymentType, referenceId, merchantNumber, tpn, authkey,
                sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterTipAdjustWithHttpInfo(double? amount, double? tipAmount, string cardLast4,
            string paymentType, string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'tipAmount' is set
            if (tipAmount == null)
                throw new ApiException(400, "Missing required parameter 'tipAmount' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'cardLast4' is set
            if (cardLast4 == null)
                throw new ApiException(400, "Missing required parameter 'cardLast4' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterTipAdjust");

            var localVarPath = "/v2/Payment/TipAdjust";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (tipAmount != null) localVarFormParams.Add("TipAmount", Configuration.ApiClient.ParameterToString(tipAmount)); // form parameter
            if (cardLast4 != null) localVarFormParams.Add("CardLast4", Configuration.ApiClient.ParameterToString(cardLast4)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterTipAdjust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterTipAdjustAsync(double? amount, double? tipAmount, string cardLast4, string paymentType,
            string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterTipAdjustAsyncWithHttpInfo(amount, tipAmount, cardLast4, paymentType, referenceId, merchantNumber,
                tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="tipAmount"></param>
        /// <param name="cardLast4"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterTipAdjustAsyncWithHttpInfo(double? amount, double? tipAmount,
            string cardLast4, string paymentType, string referenceId, int? merchantNumber, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'tipAmount' is set
            if (tipAmount == null)
                throw new ApiException(400, "Missing required parameter 'tipAmount' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'cardLast4' is set
            if (cardLast4 == null)
                throw new ApiException(400, "Missing required parameter 'cardLast4' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterTipAdjust");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterTipAdjust");

            var localVarPath = "/v2/Payment/TipAdjust";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (tipAmount != null) localVarFormParams.Add("TipAmount", Configuration.ApiClient.ParameterToString(tipAmount)); // form parameter
            if (cardLast4 != null) localVarFormParams.Add("CardLast4", Configuration.ApiClient.ParameterToString(cardLast4)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterTipAdjust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserChoiceResponseContract</returns>
        public UserChoiceResponseContract RegisterUserChoice(UserChoiceRequestContract body)
        {
            var localVarResponse = RegisterUserChoiceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserChoiceResponseContract</returns>
        public ApiResponse<UserChoiceResponseContract> RegisterUserChoiceWithHttpInfo(UserChoiceRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterUserChoice");

            var localVarPath = "/v2/Common/UserChoice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserChoiceResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserChoiceResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserChoiceResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserChoiceResponseContract</returns>
        public async Task<UserChoiceResponseContract> RegisterUserChoiceAsync(UserChoiceRequestContract body)
        {
            var localVarResponse = await RegisterUserChoiceAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserChoiceResponseContract)</returns>
        public async Task<ApiResponse<UserChoiceResponseContract>> RegisterUserChoiceAsyncWithHttpInfo(UserChoiceRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterUserChoice");

            var localVarPath = "/v2/Common/UserChoice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserChoiceResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserChoiceResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserChoiceResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>UserChoiceResponseContract</returns>
        public UserChoiceResponseContract RegisterUserChoice(string title, List<string> choiceOptions, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterUserChoiceWithHttpInfo(title, choiceOptions, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of UserChoiceResponseContract</returns>
        public ApiResponse<UserChoiceResponseContract> RegisterUserChoiceWithHttpInfo(string title, List<string> choiceOptions, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'choiceOptions' is set
            if (choiceOptions == null)
                throw new ApiException(400, "Missing required parameter 'choiceOptions' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterUserChoice");

            var localVarPath = "/v2/Common/UserChoice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarFormParams.Add("Title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (choiceOptions != null)
                localVarFormParams.Add("ChoiceOptions", Configuration.ApiClient.ParameterToString(choiceOptions)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserChoiceResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserChoiceResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserChoiceResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of UserChoiceResponseContract</returns>
        public async Task<UserChoiceResponseContract> RegisterUserChoiceAsync(string title, List<string> choiceOptions, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterUserChoiceAsyncWithHttpInfo(title, choiceOptions, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="choiceOptions"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (UserChoiceResponseContract)</returns>
        public async Task<ApiResponse<UserChoiceResponseContract>> RegisterUserChoiceAsyncWithHttpInfo(string title, List<string> choiceOptions,
            string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'choiceOptions' is set
            if (choiceOptions == null)
                throw new ApiException(400, "Missing required parameter 'choiceOptions' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterUserChoice");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterUserChoice");

            var localVarPath = "/v2/Common/UserChoice";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarFormParams.Add("Title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (choiceOptions != null)
                localVarFormParams.Add("ChoiceOptions", Configuration.ApiClient.ParameterToString(choiceOptions)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserChoiceResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserChoiceResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserChoiceResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>UserInputResponseContract</returns>
        public UserInputResponseContract RegisterUserInput(UserInputRequestContract body)
        {
            var localVarResponse = RegisterUserInputWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserInputResponseContract</returns>
        public ApiResponse<UserInputResponseContract> RegisterUserInputWithHttpInfo(UserInputRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterUserInput");

            var localVarPath = "/v2/Common/UserInput";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInputResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInputResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInputResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of UserInputResponseContract</returns>
        public async Task<UserInputResponseContract> RegisterUserInputAsync(UserInputRequestContract body)
        {
            var localVarResponse = await RegisterUserInputAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserInputResponseContract)</returns>
        public async Task<ApiResponse<UserInputResponseContract>> RegisterUserInputAsyncWithHttpInfo(UserInputRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterUserInput");

            var localVarPath = "/v2/Common/UserInput";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInputResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInputResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInputResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>UserInputResponseContract</returns>
        public UserInputResponseContract RegisterUserInput(string title, int? timeout, int? maxLength, bool? hiddenInput, string type, string tpn,
            string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterUserInputWithHttpInfo(title, timeout, maxLength, hiddenInput, type, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of UserInputResponseContract</returns>
        public ApiResponse<UserInputResponseContract> RegisterUserInputWithHttpInfo(string title, int? timeout, int? maxLength, bool? hiddenInput,
            string type, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'timeout' is set
            if (timeout == null)
                throw new ApiException(400, "Missing required parameter 'timeout' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'maxLength' is set
            if (maxLength == null)
                throw new ApiException(400, "Missing required parameter 'maxLength' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'hiddenInput' is set
            if (hiddenInput == null)
                throw new ApiException(400, "Missing required parameter 'hiddenInput' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterUserInput");

            var localVarPath = "/v2/Common/UserInput";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarFormParams.Add("Title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (maxLength != null) localVarFormParams.Add("MaxLength", Configuration.ApiClient.ParameterToString(maxLength)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("HiddenInput", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (type != null) localVarFormParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInputResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInputResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInputResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of UserInputResponseContract</returns>
        public async Task<UserInputResponseContract> RegisterUserInputAsync(string title, int? timeout, int? maxLength, bool? hiddenInput,
            string type, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse =
                await RegisterUserInputAsyncWithHttpInfo(title, timeout, maxLength, hiddenInput, type, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title"></param>
        /// <param name="timeout"></param>
        /// <param name="maxLength"></param>
        /// <param name="hiddenInput"></param>
        /// <param name="type"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (UserInputResponseContract)</returns>
        public async Task<ApiResponse<UserInputResponseContract>> RegisterUserInputAsyncWithHttpInfo(string title, int? timeout, int? maxLength,
            bool? hiddenInput, string type, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'title' is set
            if (title == null)
                throw new ApiException(400, "Missing required parameter 'title' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'timeout' is set
            if (timeout == null)
                throw new ApiException(400, "Missing required parameter 'timeout' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'maxLength' is set
            if (maxLength == null)
                throw new ApiException(400, "Missing required parameter 'maxLength' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'hiddenInput' is set
            if (hiddenInput == null)
                throw new ApiException(400, "Missing required parameter 'hiddenInput' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterUserInput");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterUserInput");

            var localVarPath = "/v2/Common/UserInput";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (title != null) localVarFormParams.Add("Title", Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (timeout != null) localVarFormParams.Add("Timeout", Configuration.ApiClient.ParameterToString(timeout)); // form parameter
            if (maxLength != null) localVarFormParams.Add("MaxLength", Configuration.ApiClient.ParameterToString(maxLength)); // form parameter
            if (hiddenInput != null) localVarFormParams.Add("HiddenInput", Configuration.ApiClient.ParameterToString(hiddenInput)); // form parameter
            if (type != null) localVarFormParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterUserInput", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInputResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UserInputResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInputResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterVoid(VoidRequestContract body)
        {
            var localVarResponse = RegisterVoidWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterVoidWithHttpInfo(VoidRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterVoid");

            var localVarPath = "/v2/Payment/Void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterVoidAsync(VoidRequestContract body)
        {
            var localVarResponse = await RegisterVoidAsyncWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterVoidAsyncWithHttpInfo(VoidRequestContract body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RegisterApi->RegisterVoid");

            var localVarPath = "/v2/Payment/Void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            else
                localVarPostBody = body; // byte array

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>BasePaymentResponseContract</returns>
        public BasePaymentResponseContract RegisterVoid(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = RegisterVoidWithHttpInfo(amount, paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>ApiResponse of BasePaymentResponseContract</returns>
        public ApiResponse<BasePaymentResponseContract> RegisterVoidWithHttpInfo(double? amount, string paymentType, string referenceId,
            string printReceipt, string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterVoid");

            var localVarPath = "/v2/Payment/Void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of BasePaymentResponseContract</returns>
        public async Task<BasePaymentResponseContract> RegisterVoidAsync(double? amount, string paymentType, string referenceId, string printReceipt,
            string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey, int? sPInProxyTimeout)
        {
            var localVarResponse = await RegisterVoidAsyncWithHttpInfo(amount, paymentType, referenceId, printReceipt, getReceipt, merchantNumber,
                captureSignature, tpn, authkey, sPInProxyTimeout);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="amount"></param>
        /// <param name="paymentType"></param>
        /// <param name="referenceId"></param>
        /// <param name="printReceipt"></param>
        /// <param name="getReceipt"></param>
        /// <param name="merchantNumber"></param>
        /// <param name="captureSignature"></param>
        /// <param name="tpn"></param>
        /// <param name="authkey"></param>
        /// <param name="sPInProxyTimeout"></param>
        /// <returns>Task of ApiResponse (BasePaymentResponseContract)</returns>
        public async Task<ApiResponse<BasePaymentResponseContract>> RegisterVoidAsyncWithHttpInfo(double? amount, string paymentType,
            string referenceId, string printReceipt, string getReceipt, int? merchantNumber, bool? captureSignature, string tpn, string authkey,
            int? sPInProxyTimeout)
        {
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'paymentType' is set
            if (paymentType == null)
                throw new ApiException(400, "Missing required parameter 'paymentType' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'referenceId' is set
            if (referenceId == null)
                throw new ApiException(400, "Missing required parameter 'referenceId' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'printReceipt' is set
            if (printReceipt == null)
                throw new ApiException(400, "Missing required parameter 'printReceipt' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'getReceipt' is set
            if (getReceipt == null)
                throw new ApiException(400, "Missing required parameter 'getReceipt' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'merchantNumber' is set
            if (merchantNumber == null)
                throw new ApiException(400, "Missing required parameter 'merchantNumber' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'captureSignature' is set
            if (captureSignature == null)
                throw new ApiException(400, "Missing required parameter 'captureSignature' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'tpn' is set
            if (tpn == null)
                throw new ApiException(400, "Missing required parameter 'tpn' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'authkey' is set
            if (authkey == null)
                throw new ApiException(400, "Missing required parameter 'authkey' when calling RegisterApi->RegisterVoid");
            // verify the required parameter 'sPInProxyTimeout' is set
            if (sPInProxyTimeout == null)
                throw new ApiException(400, "Missing required parameter 'sPInProxyTimeout' when calling RegisterApi->RegisterVoid");

            var localVarPath = "/v2/Payment/Void";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (amount != null) localVarFormParams.Add("Amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (paymentType != null) localVarFormParams.Add("PaymentType", Configuration.ApiClient.ParameterToString(paymentType)); // form parameter
            if (referenceId != null) localVarFormParams.Add("ReferenceId", Configuration.ApiClient.ParameterToString(referenceId)); // form parameter
            if (printReceipt != null)
                localVarFormParams.Add("PrintReceipt", Configuration.ApiClient.ParameterToString(printReceipt)); // form parameter
            if (getReceipt != null) localVarFormParams.Add("GetReceipt", Configuration.ApiClient.ParameterToString(getReceipt)); // form parameter
            if (merchantNumber != null)
                localVarFormParams.Add("MerchantNumber", Configuration.ApiClient.ParameterToString(merchantNumber)); // form parameter
            if (captureSignature != null)
                localVarFormParams.Add("CaptureSignature", Configuration.ApiClient.ParameterToString(captureSignature)); // form parameter
            if (tpn != null) localVarFormParams.Add("Tpn", Configuration.ApiClient.ParameterToString(tpn)); // form parameter
            if (authkey != null) localVarFormParams.Add("Authkey", Configuration.ApiClient.ParameterToString(authkey)); // form parameter
            if (sPInProxyTimeout != null)
                localVarFormParams.Add("SPInProxyTimeout", Configuration.ApiClient.ParameterToString(sPInProxyTimeout)); // form parameter

            // make the HTTP request
            var localVarResponse = (RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("RegisterVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasePaymentResponseContract>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BasePaymentResponseContract)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasePaymentResponseContract)));
        }

        /// <summary>
        ///     Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        ///     Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        ///     Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }
    }
}